////////////////////////////////////////////////////////////////////////////////
/**
*@file      stusb4500_low_if.c
*@brief     Top level interface with USB PD chipset
*@author    Ziga Miklosic
*@date      29.04.2021
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup STUSB4500_API
* @{ <!-- BEGIN GROUP -->
*
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "stm32f7xx_hal.h"
#include "stusb4500_if.h"
#include "stusb4500_cfg.h"

// USER INCLUDES BEGIN...

#include "drivers/peripheral/i2c/i2c.h"

// USER INCLUDES END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/**
*		Initialize low level interface
*
* @note	User shall provide definition of that function based on used platform!
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_init(void)
{
	stusb4500_status_t status = eSTUSB4500_OK;

	// USER CODE BEGIN...

	// Left empty as periphery is initilize elswhere...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Write to register
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	addr 		- Register address
* @param[in] 	p_tx_data	- Pointer to transmit data
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_write_register(const uint8_t addr, const uint8_t * p_tx_data, const uint32_t size)
{
	stusb4500_status_t status = eSTUSB4500_OK;

	// USER CODE BEGIN...

	if ( eI2C_OK != i2c_write( STUSB4500_DEV_ADDR, addr, (uint8_t*)p_tx_data, size ))
	{
		status = eSTUSB4500_ERROR;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Read from register
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	addr 		- Register address
* @param[in] 	p_rx_data	- Pointer to receive data
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_read_register(const uint8_t addr, uint8_t * p_rx_data, const uint32_t size)
{
	stusb4500_status_t status = eSTUSB4500_OK;

	// USER CODE BEGIN...

	if ( eI2C_OK != i2c_read( STUSB4500_DEV_ADDR, addr, p_rx_data, size ))
	{
		status = eSTUSB4500_ERROR;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

